static group_t _decode(blink_stream_t in, const struct blink_allocator *alloc, uint8_t depth)
{
    group_t retval = NULL;
    struct blink_stream bounded;
    uint32_t size;
    bool isNull;
    uint64_t id;

    if(!BLINK_Compact_decodeU32(in, &size, &isNull)){
        return NULL;
    }

    (void)BLINK_Stream_initBounded(&bounded, in, size);

    if(isNull){

        return NULL;
    }

    if(size == 0U){

        return NULL;
    }

    if(BLINK_Compact_decodeU64(&bounded, &id, &isNull)){

        if(!isNull){

            switch(id){
<%@schema.groups.select{|g|g.id}.each do |g| %>
            case <%= g.id %>U:
                retval = <%= gname(g) %>_decodeBody(&bounded, alloc, (struct <%= gname(g) %> *)retval, depth);
                break;
<%end %>
            default:
                BLINK_ERROR("unknown group");
                break;
            }

            (void)BLINK_Stream_setMax(&bounded, size);
            
            if(retval != NULL){

                uint32_t i;

                /* ignore extensions */
                for(i=BLINK_Stream_tell(&bounded); i < size; i++){

                    uint8_t c;
                    if(!BLINK_Stream_read(in, &c, sizeof(c))){

                        destroy(retval);
                    }
                }
            }
        }
        else{

            BLINK_ERROR("unknown group")
        }
    }
    
    if(retval == NULL){

        if(!BLINK_Stream_eof(in)){

            uint32_t i;

            for(i=BLINK_Stream_tell(&bounded); i < size; i++){

                uint8_t c;
                (void)BLINK_Stream_read(in, &c, sizeof(c));
            }
        }
        else{

            BLINK_ERROR("S1: group ends prematurely")
        }   
    }
    
    return retval;
}

group_t decode(blink_stream_t in, const struct blink_allocator *alloc)
{
    return _decode(in, alloc, 42);
}
