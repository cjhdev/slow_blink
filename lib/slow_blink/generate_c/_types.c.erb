struct blink_enum {
    int32_t value;
    const char *name;
    size_t nameLen;
};

struct group_base {
    enum group_type type;
    struct blink_allocator a;
};

<%@schema.groups.each do |g| -%>
struct <%= gname(g) %> {

    struct group_base super;
    
<%  g.fields.each do |f| -%>
    struct {

        bool initialised;

<%    if f.type.sequence? -%>
        struct <%= f.name %> {

            struct <%= f.name %> *next;
<%    end -%>
        
<%    case f.type.class
      when STRING, BINARY, FIXED -%>
<%      if f.type.is_a? FIXED or f.type.size -%>
            struct {
                uint8_t data[<%= f.type.size %>U];
                uint32_t size;
            } value;
<%      else -%>
            struct {
                uint8_t *data;
                uint32_t size;
            } value;        
<%      end -%>
<%    when ENUM -%>
            int32_t value;
<%    else -%>
            <%= value_type(f.type) -%> value;
<%    end -%>

<%    if f.type.sequence? -%>
        };

        struct <%= f.name %> *head;
        struct <%= f.name %> *tail;
        uint32_t sequenceSize;
        
<%    end -%>

    } <%= fname(f) %>;

<%  end -%>
};

<%end -%>
